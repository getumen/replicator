// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mockhandler is a generated GoMock package.
package mockhandler

import (
	models "github.com/getumen/replicator/pkg/models"
	store "github.com/getumen/replicator/pkg/store"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockHandler) Apply(arg0 store.Store, arg1 *models.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockHandlerMockRecorder) Apply(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockHandler)(nil).Apply), arg0, arg1)
}

// ApplyBatch mocks base method
func (m *MockHandler) ApplyBatch(arg0 store.Store, arg1 []*models.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyBatch indicates an expected call of ApplyBatch
func (mr *MockHandlerMockRecorder) ApplyBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBatch", reflect.TypeOf((*MockHandler)(nil).ApplyBatch), arg0, arg1)
}
