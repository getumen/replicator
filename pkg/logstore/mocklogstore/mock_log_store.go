// Code generated by MockGen. DO NOT EDIT.
// Source: log_store.go

// Package mocklogstore is a generated GoMock package.
package mocklogstore

import (
	gomock "github.com/golang/mock/gomock"
	raft "github.com/hashicorp/raft"
	reflect "reflect"
)

// MockLogStore is a mock of LogStore interface
type MockLogStore struct {
	ctrl     *gomock.Controller
	recorder *MockLogStoreMockRecorder
}

// MockLogStoreMockRecorder is the mock recorder for MockLogStore
type MockLogStoreMockRecorder struct {
	mock *MockLogStore
}

// NewMockLogStore creates a new mock instance
func NewMockLogStore(ctrl *gomock.Controller) *MockLogStore {
	mock := &MockLogStore{ctrl: ctrl}
	mock.recorder = &MockLogStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogStore) EXPECT() *MockLogStoreMockRecorder {
	return m.recorder
}

// FirstIndex mocks base method
func (m *MockLogStore) FirstIndex() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstIndex")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstIndex indicates an expected call of FirstIndex
func (mr *MockLogStoreMockRecorder) FirstIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstIndex", reflect.TypeOf((*MockLogStore)(nil).FirstIndex))
}

// LastIndex mocks base method
func (m *MockLogStore) LastIndex() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastIndex")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastIndex indicates an expected call of LastIndex
func (mr *MockLogStoreMockRecorder) LastIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastIndex", reflect.TypeOf((*MockLogStore)(nil).LastIndex))
}

// GetLog mocks base method
func (m *MockLogStore) GetLog(index uint64, log *raft.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLog", index, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLog indicates an expected call of GetLog
func (mr *MockLogStoreMockRecorder) GetLog(index, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockLogStore)(nil).GetLog), index, log)
}

// StoreLog mocks base method
func (m *MockLogStore) StoreLog(log *raft.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLog", log)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLog indicates an expected call of StoreLog
func (mr *MockLogStoreMockRecorder) StoreLog(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLog", reflect.TypeOf((*MockLogStore)(nil).StoreLog), log)
}

// StoreLogs mocks base method
func (m *MockLogStore) StoreLogs(logs []*raft.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreLogs", logs)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreLogs indicates an expected call of StoreLogs
func (mr *MockLogStoreMockRecorder) StoreLogs(logs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreLogs", reflect.TypeOf((*MockLogStore)(nil).StoreLogs), logs)
}

// DeleteRange mocks base method
func (m *MockLogStore) DeleteRange(min, max uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRange", min, max)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRange indicates an expected call of DeleteRange
func (mr *MockLogStoreMockRecorder) DeleteRange(min, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRange", reflect.TypeOf((*MockLogStore)(nil).DeleteRange), min, max)
}
