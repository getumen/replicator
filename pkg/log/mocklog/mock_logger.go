// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package mocklog is a generated GoMock package.
package mocklog

import (
	log "github.com/getumen/replicator/pkg/log"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method
func (m *MockLogger) Debug(message string, fields log.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", message, fields)
}

// Debug indicates an expected call of Debug
func (mr *MockLoggerMockRecorder) Debug(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), message, fields)
}

// Info mocks base method
func (m *MockLogger) Info(message string, fields log.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", message, fields)
}

// Info indicates an expected call of Info
func (mr *MockLoggerMockRecorder) Info(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), message, fields)
}

// Warning mocks base method
func (m *MockLogger) Warning(message string, fields log.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warning", message, fields)
}

// Warning indicates an expected call of Warning
func (mr *MockLoggerMockRecorder) Warning(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockLogger)(nil).Warning), message, fields)
}

// Fatal mocks base method
func (m *MockLogger) Fatal(message string, fields log.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", message, fields)
}

// Fatal indicates an expected call of Fatal
func (mr *MockLoggerMockRecorder) Fatal(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), message, fields)
}

// Panic mocks base method
func (m *MockLogger) Panic(message string, fields log.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panic", message, fields)
}

// Panic indicates an expected call of Panic
func (mr *MockLoggerMockRecorder) Panic(message, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic), message, fields)
}
